# result_saver.py

import os
import json
from datetime import datetime
import webbrowser
from typing import List, Dict

class ResearchResultSaver:
    """
    Handles saving research results to various file formats (JSON, Markdown, HTML)
    and manages the output directory structure.
    연구 결과를 다양한 파일 형식(JSON, Markdown, HTML)으로 저장하고 출력 디렉토리 구조를 관리합니다.
    """

    def __init__(self, output_dir: str = "research_results"):
        """
        Initializes the saver and creates the necessary output directories.
        
        Args:
            output_dir (str): The root directory for saving results.
        """
        self.output_dir = output_dir
        self.agent_emojis = {
            'domain_classifier': '🔍',
            'senior_researcher': '👨‍🏫',
            'prompt_engineer': '✏️',
            'ai_specialist': '🤖',
            'research_trend_analyst': '📚',
            'feasibility_evaluator': '⚖️',
            'improvement_strategist': '🔧',
            'topic_recommender': '🎯',
            'advisor_professor': '👨‍🏫',
            'final_resource_engineer': '🛠️',
            'user': '👤'
        }
        self.create_output_directory()

    def create_output_directory(self):
        """Creates the directory structure for storing results if it doesn't exist."""
        os.makedirs(self.output_dir, exist_ok=True)
        os.makedirs(os.path.join(self.output_dir, "json"), exist_ok=True)
        os.makedirs(os.path.join(self.output_dir, "markdown"), exist_ok=True)
        os.makedirs(os.path.join(self.output_dir, "html"), exist_ok=True)

    def save_results(self, messages: List[Dict], user_idea: str, timestamp: str) -> Dict:
        """
        Saves the analysis results into JSON, Markdown, and HTML files.
        
        Args:
            messages (List[Dict]): The list of messages from the agent chat.
            user_idea (str): The initial research idea from the user.
            timestamp (str): A timestamp string for unique filenames.
            
        Returns:
            Dict: A dictionary containing the absolute paths to the saved files.
        """
        json_data = {
            "timestamp": timestamp,
            "user_idea": user_idea,
            "total_messages": len(messages),
            "agents_responses": messages
        }

        # 1. Save as JSON
        json_filename = os.path.join(self.output_dir, "json", f"research_result_{timestamp}.json")
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, ensure_ascii=False, indent=2)

        # 2. Save as Markdown
        markdown_content = self._generate_markdown_report(json_data)
        markdown_filename = os.path.join(self.output_dir, "markdown", f"research_report_{timestamp}.md")
        with open(markdown_filename, 'w', encoding='utf-8') as f:
            f.write(markdown_content)

        # 3. Save as HTML
        html_content = self._generate_html_report(json_data)
        html_filename = os.path.join(self.output_dir, "html", f"research_report_{timestamp}.html")
        with open(html_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)

        return {
            "json_file": os.path.abspath(json_filename),
            "markdown_file": os.path.abspath(markdown_filename),
            "html_file": os.path.abspath(html_filename)
        }

    def _generate_markdown_report(self, data: Dict) -> str:
        """
        Generates the content for the Markdown report.
        
        Args:
            data (Dict): The JSON data containing the research results.
            
        Returns:
            str: The Markdown formatted report content.
        """
        content = f"""# Jarvis Research - Analysis Report

## 📋 Basic Information
- **Research Idea**: {data['user_idea']}
- **Analysis Timestamp**: {data['timestamp']}
- **Total Analysis Steps**: {data['total_messages']}
- **Participating Agents**: 10 Expert Agents

---

## 🔄 Step-by-Step Analysis Results

"""
        for response in data['agents_responses']:
            emoji = self.agent_emojis.get(response.get('agent'), '🔹')
            agent_name = response.get('agent', 'unknown').replace('_', ' ').title()
            content += f"""### {emoji} Step {response.get('step', '#')}: {agent_name}

{response.get('content')}

---

"""
        content += f"""## 📊 Analysis Completion Information

- **Generation Time**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **System Version**: Jarvis Research v1.0
- **File Format**: Markdown Report

> This report was automatically generated by the Jarvis Research System.
"""
        return content

    def _generate_html_report(self, data: Dict) -> str:
        """
        Generates a styled HTML report from the research data.
        
        Args:
            data (Dict): The JSON data containing the research results.
            
        Returns:
            str: The HTML content for the report.
        """
        # (The HTML generation logic from the notebook would go here)
        # For brevity, a simplified version is shown.
        
        # Build the agent response cards
        agent_cards_html = ""
        for i, response in enumerate(data['agents_responses']):
            agent = response.get('agent', 'unknown')
            content = response.get('content', 'No content.')
            emoji = self.agent_emojis.get(agent, '🔹')
            agent_name = agent.replace('_', ' ').title()
            agent_cards_html += f"""
            <div class="agent-response">
                <div class="agent-title">
                    <span class="agent-emoji">{emoji}</span>
                    Step {i+1}: {agent_name}
                </div>
                <div class="agent-content">{content.replace('<', '&lt;').replace('>', '&gt;')}</div>
            </div>
            """

        # Final HTML structure
        html_template = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Jarvis Research - Analysis Report</title>
            <style>
                body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; margin: 0; padding: 20px; background: #f4f7f9; }}
                .container {{ max-width: 1200px; margin: auto; background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); overflow: hidden; }}
                .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }}
                .header h1 {{ margin: 0; font-size: 2.5em; }}
                .content {{ padding: 30px; }}
                .info-box {{ background: #f8f9fa; border-radius: 10px; padding: 20px; margin-bottom: 20px; border-left: 5px solid #667eea; }}
                .agent-response {{ border: 1px solid #eef; border-radius: 10px; padding: 20px; margin-bottom: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); }}
                .agent-title {{ font-size: 1.3em; font-weight: bold; color: #333; margin-bottom: 10px; display: flex; align-items: center; }}
                .agent-emoji {{ font-size: 1.5em; margin-right: 10px; }}
                .agent-content {{ white-space: pre-wrap; color: #555; }}
                .footer {{ background: #333; color: white; padding: 20px; text-align: center; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header"><h1>🚀 Jarvis Research Report</h1></div>
                <div class="content">
                    <div class="info-box">
                        <h2>📋 Analysis Overview</h2>
                        <p><strong>Research Idea:</strong> {data['user_idea']}</p>
                        <p><strong>Analysis Timestamp:</strong> {data['timestamp']}</p>
                    </div>
                    <h2>🔄 Step-by-Step Analysis</h2>
                    {agent_cards_html}
                </div>
                <div class="footer"><p>Report generated by Jarvis Research System at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p></div>
            </div>
        </body>
        </html>
        """
        return html_template

    def open_html_report(self, html_file_path: str) -> bool:
        """
        Opens the generated HTML report in a new web browser tab.
        
        Args:
            html_file_path (str): The path to the HTML file.
            
        Returns:
            bool: True if successful, False otherwise.
        """
        try:
            webbrowser.open(f'file://{os.path.abspath(html_file_path)}')
            return True
        except Exception as e:
            print(f"Failed to open browser: {e}")
            return False

